import streamlit as st
import requests
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
import networkx as nx
from collections import Counter
import numpy as np

# –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Longevity Research Dashboard",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URL backend API (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
API_URL = "http://localhost:8000"

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        border-left: 4px solid #1f77b4;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2rem;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API (–∑–∞–ø–æ–ª–Ω—é –ø–æ–∑–∂–µ)
def fetch_graph():
    try:
        response = requests.get(f"{API_URL}/graph", timeout=30)
        response.raise_for_status()
        # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ backend –≤–µ—Ä–Ω–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ (–Ω–∞–ø—Ä–∏–º–µ—Ä, json –∏–ª–∏ pickle)
        # –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä –¥–ª—è json-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
        return response.json()
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä–∞—Ñ: {e}")
        return None

def fetch_tasks_db():
    try:
        response = requests.get(f"{API_URL}/tasks_db", timeout=30)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å tasks_db: {e}")
        return None

def fetch_articles():
    try:
        response = requests.get(f"{API_URL}/articles", timeout=30)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏: {e}")
        return None

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    st.markdown('<div class="main-header">üß¨ Longevity Research Dashboard</div>', unsafe_allow_html=True)
    st.markdown("---")

    # TODO: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API
    graph = fetch_graph()
    tasks_db = fetch_tasks_db()
    articles = fetch_articles()

    # TODO: Sidebar —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    st.sidebar.title("üîç Filters & Settings")
    st.sidebar.markdown("### üìä Overview")
    st.sidebar.metric("Research Tasks", 0)
    st.sidebar.metric("Articles", 0)
    st.sidebar.metric("Total Nodes", 0)
    st.sidebar.metric("Connections", 0)

    # TODO: –§–∏–ª—å—Ç—Ä—ã
    category_filter = st.sidebar.selectbox("Category Filter", ["All"])
    task_filter = st.sidebar.text_input("Search Tasks", placeholder="Enter keywords...")

    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üï∏Ô∏è Knowledge Graph", 
        "üìä Analytics Dashboard", 
        "üìà Timeline Analysis",
        "üî¨ Research Analysis",
        "üìã Data Explorer"
    ])

    with tab1:
        st.subheader("Interactive Knowledge Graph")
        st.markdown("Explore the network of research tasks, articles, and biomedical entities.")
        st.info("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    with tab2:
        st.subheader("Research Analytics Dashboard")
        st.info("–î–∞—à–±–æ—Ä–¥ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    with tab3:
        st.subheader("Publication Timeline Analysis")
        st.info("–ì—Ä–∞—Ñ–∏–∫ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    with tab4:
        st.subheader("Research Task Analysis")
        st.info("–ê–Ω–∞–ª–∏–∑ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

    with tab5:
        st.subheader("Data Explorer")
        st.info("–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == "__main__":
    main()
